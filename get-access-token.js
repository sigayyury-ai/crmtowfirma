#!/usr/bin/env node

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ Access Token –¥–ª—è wFirma OAuth 2.0
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç authorization code flow
 */

require('dotenv').config();
const axios = require('axios');
const logger = require('./src/utils/logger');

async function getAccessToken(authorizationCode) {
  console.log('üîê –ü–æ–ª—É—á–µ–Ω–∏–µ Access Token –¥–ª—è wFirma OAuth 2.0...\n');

  const clientId = process.env.WFIRMA_CLIENT_ID || '0a749723fca35677bf7a6f931646385e';
  const clientSecret = process.env.WFIRMA_CLIENT_SECRET || 'c5b3bc3058a60caaf13b4e57cd4d5c15';
  const redirectUri = 'https://comoon.io/oauth/callback';
  const baseURL = process.env.WFIRMA_BASE_URL || 'https://api2.wfirma.pl';

  if (!authorizationCode) {
    console.log('‚ùå –û—à–∏–±–∫–∞: –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω authorization code');
    console.log('\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
    console.log(`   ${baseURL}/oauth/authorize?client_id=${clientId}&response_type=code&scope=read write&redirect_uri=${encodeURIComponent(redirectUri)}`);
    console.log('2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ wFirma');
    console.log('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ redirect URL (–ø–∞—Ä–∞–º–µ—Ç—Ä "code")');
    console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –∫–æ–¥–æ–º:');
    console.log(`   node get-access-token.js YOUR_AUTHORIZATION_CODE`);
    return;
  }

  try {
    console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:');
    console.log(`   Client ID: ${clientId}`);
    console.log(`   Authorization Code: ${authorizationCode.substring(0, 20)}...`);
    console.log(`   Redirect URI: ${redirectUri}`);
    console.log(`   Base URL: ${baseURL}\n`);

    // –ó–∞–ø—Ä–æ—Å access token
    const tokenResponse = await axios.post(`${baseURL}/oauth/token`, {
      grant_type: 'authorization_code',
      client_id: clientId,
      client_secret: clientSecret,
      code: authorizationCode,
      redirect_uri: redirectUri
    }, {
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      timeout: 15000
    });

    if (tokenResponse.data) {
      console.log('‚úÖ Access Token –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('\nüìä –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞:');
      console.log(`   Access Token: ${tokenResponse.data.access_token}`);
      console.log(`   Token Type: ${tokenResponse.data.token_type || 'Bearer'}`);
      console.log(`   Expires In: ${tokenResponse.data.expires_in || 'N/A'} —Å–µ–∫—É–Ω–¥`);
      if (tokenResponse.data.refresh_token) {
        console.log(`   Refresh Token: ${tokenResponse.data.refresh_token}`);
      }
      if (tokenResponse.data.scope) {
        console.log(`   Scope: ${tokenResponse.data.scope}`);
      }

      console.log('\nüîß –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:');
      console.log(`WFIRMA_ACCESS_TOKEN=${tokenResponse.data.access_token}`);
      if (tokenResponse.data.refresh_token) {
        console.log(`WFIRMA_REFRESH_TOKEN=${tokenResponse.data.refresh_token}`);
      }

      // –¢–µ—Å—Ç API —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
      console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
      await testAPIWithToken(tokenResponse.data.access_token);

    } else {
      console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    }

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Access Token:', error.message);
    
    if (error.response) {
      console.error('üìã –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', error.response.status);
      console.error('üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(error.response.data, null, 2));
    }
    
    console.log('\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('- –ù–µ–≤–µ—Ä–Ω—ã–π authorization code');
    console.log('- –ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)');
    console.log('- –ù–µ–≤–µ—Ä–Ω—ã–µ client_id –∏–ª–∏ client_secret');
    console.log('- –ù–µ–≤–µ—Ä–Ω—ã–π redirect_uri');
    console.log('- –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–º wFirma');
  }
}

async function testAPIWithToken(accessToken) {
  try {
    const baseURL = process.env.WFIRMA_BASE_URL || 'https://api2.wfirma.pl';
    
    const response = await axios.get(`${baseURL}/contractors`, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Accept': 'application/json'
      },
      timeout: 10000
    });

    console.log('‚úÖ API —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!');
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status}`);
    console.log(`üìä –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(response.data, null, 2)}`);

  } catch (error) {
    console.log('‚ö†Ô∏è  API —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª:', error.message);
    if (error.response) {
      console.log(`üìã –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.log(`üìã –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data, null, 2)}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const authCode = process.argv[2];
  
  getAccessToken(authCode)
    .then(() => {
      console.log('\nüèÅ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error.message);
      process.exit(1);
    });
}

module.exports = getAccessToken;






