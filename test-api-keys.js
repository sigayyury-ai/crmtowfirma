#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç API Keys –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ wFirma
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç—É —Å API
 */

require('dotenv').config();
const WfirmaClient = require('./src/services/wfirma');
const logger = require('./src/utils/logger');

async function testApiKeysAuthorization() {
  console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Keys –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ wFirma...\n');

  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    const wfirmaClient = new WfirmaClient();
    
    console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
    console.log(`   Access Key: ${process.env.WFIRMA_ACCESS_KEY ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`   Secret Key: ${process.env.WFIRMA_SECRET_KEY ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`   Base URL: ${process.env.WFIRMA_BASE_URL || 'https://api2.wfirma.pl'}\n`);

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('üîë –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    const connectionResult = await wfirmaClient.checkConnection();
    
    if (connectionResult.success) {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:', connectionResult.message);
      console.log(`   Access Key: ${connectionResult.access_key}`);
      console.log(`   Secret Key: ${connectionResult.secret_key}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', connectionResult.error);
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
    console.log('\nüåê –¢–µ—Å—Ç 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ wFirma API...');
    const apiResult = await wfirmaClient.testConnection();
    
    if (apiResult.success) {
      console.log('‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', apiResult.message);
      if (apiResult.data) {
        console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(apiResult.data, null, 2));
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', apiResult.error);
      if (apiResult.details) {
        console.log('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(apiResult.details, null, 2));
      }
    }

    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    console.log('\nüë• –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤...');
    const contractorsResult = await wfirmaClient.getContractors();
    
    if (contractorsResult.success) {
      console.log('‚úÖ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      if (contractorsResult.contractors) {
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: ${contractorsResult.contractors.length}`);
      }
      if (contractorsResult.rawResponse) {
        console.log('üìÑ XML –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞)');
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤:', contractorsResult.error);
      if (contractorsResult.details) {
        console.log('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(contractorsResult.details, null, 2));
      }
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('üìã Stack trace:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testApiKeysAuthorization()
    .then(() => {
      console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', error.message);
      process.exit(1);
    });
}

module.exports = testApiKeysAuthorization;






