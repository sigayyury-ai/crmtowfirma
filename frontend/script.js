// API Base URL
const API_BASE = '/api';

// DOM Elements
const elements = {
    schedulerStatus: document.getElementById('scheduler-status'),
    schedulerInfo: document.getElementById('scheduler-info'),
    pipedriveStatus: document.getElementById('pipedrive-status'),
    wfirmaStatus: document.getElementById('wfirma-status'),
    resultsContainer: document.getElementById('results-container'),
    logsContainer: document.getElementById('logs-container'),
    
    // Buttons
    startScheduler: document.getElementById('start-scheduler'),
    stopScheduler: document.getElementById('stop-scheduler'),
    refreshStatus: document.getElementById('refresh-status'),
    runPolling: document.getElementById('run-polling'),
    getPending: document.getElementById('get-pending'),
    testApis: document.getElementById('test-apis')
};

// State
let isPolling = false;

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    initializeEventListeners();
    refreshSystemStatus();
    addLog('info', '–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
});

// Event Listeners
function initializeEventListeners() {
    elements.startScheduler.addEventListener('click', startScheduler);
    elements.stopScheduler.addEventListener('click', stopScheduler);
    elements.refreshStatus.addEventListener('click', refreshSystemStatus);
    elements.runPolling.addEventListener('click', runManualPolling);
    elements.getPending.addEventListener('click', getPendingDeals);
    elements.testApis.addEventListener('click', testAllApis);
}

// API Functions
async function apiCall(endpoint, method = 'GET', data = null) {
    try {
        const options = {
            method,
            headers: {
                'Content-Type': 'application/json',
            }
        };
        
        if (data) {
            options.body = JSON.stringify(data);
        }
        
        const response = await fetch(`${API_BASE}${endpoint}`, options);
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || `HTTP ${response.status}`);
        }
        
        return result;
    } catch (error) {
        console.error('API Error:', error);
        throw error;
    }
}

// Scheduler Functions
async function startScheduler() {
    try {
        setButtonLoading(elements.startScheduler, true);
        addLog('info', '–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...');
        
        const result = await apiCall('/invoice-processing/start', 'POST');
        
        addLog('success', '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        refreshSystemStatus();
        showResult('success', '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω', result);
    } catch (error) {
        addLog('error', `–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ${error.message}`);
        showResult('error', '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞', { error: error.message });
    } finally {
        setButtonLoading(elements.startScheduler, false);
    }
}

async function stopScheduler() {
    try {
        setButtonLoading(elements.stopScheduler, true);
        addLog('info', '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...');
        
        const result = await apiCall('/invoice-processing/stop', 'POST');
        
        addLog('success', '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        refreshSystemStatus();
        showResult('success', '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', result);
    } catch (error) {
        addLog('error', `–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: ${error.message}`);
        showResult('error', '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞', { error: error.message });
    } finally {
        setButtonLoading(elements.stopScheduler, false);
    }
}

async function refreshSystemStatus() {
    try {
        setButtonLoading(elements.refreshStatus, true);
        
        // Get scheduler status
        const schedulerResult = await apiCall('/invoice-processing/status');
        updateSchedulerStatus(schedulerResult.status);
        
        // Test APIs
        await testPipedriveApi();
        await testWfirmaApi();
        
        addLog('info', '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
        addLog('error', `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
    } finally {
        setButtonLoading(elements.refreshStatus, false);
    }
}

// Polling Functions
async function runManualPolling() {
    if (isPolling) {
        addLog('warning', 'Polling —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
        return;
    }
    
    try {
        isPolling = true;
        setButtonLoading(elements.runPolling, true);
        addLog('info', '–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ polling...');
        
        const result = await apiCall('/invoice-processing/run', 'POST', { period: 'manual' });
        
        addLog('success', `Polling –∑–∞–≤–µ—Ä—à–µ–Ω: ${result.summary.successful} —É—Å–ø–µ—à–Ω–æ, ${result.summary.errors} –æ—à–∏–±–æ–∫`);
        showPollingResults(result);
    } catch (error) {
        addLog('error', `–û—à–∏–±–∫–∞ polling: ${error.message}`);
        showResult('error', '–û—à–∏–±–∫–∞ polling', { error: error.message });
    } finally {
        isPolling = false;
        setButtonLoading(elements.runPolling, false);
    }
}

async function getPendingDeals() {
    try {
        setButtonLoading(elements.getPending, true);
        addLog('info', '–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–¥–µ–ª–æ–∫...');
        
        const result = await apiCall('/invoice-processing/pending');
        
        if (result.success) {
            addLog('success', `–ù–∞–π–¥–µ–Ω–æ ${result.deals.length} —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
            showPendingDeals(result.deals);
        } else {
            addLog('error', `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: ${result.error}`);
            showResult('error', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫', result);
        }
    } catch (error) {
        addLog('error', `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: ${error.message}`);
        showResult('error', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫', { error: error.message });
    } finally {
        setButtonLoading(elements.getPending, false);
    }
}

// API Testing
async function testAllApis() {
    try {
        setButtonLoading(elements.testApis, true);
        addLog('info', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API...');
        
        await testPipedriveApi();
        await testWfirmaApi();
        
        addLog('success', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
        addLog('error', `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: ${error.message}`);
    } finally {
        setButtonLoading(elements.testApis, false);
    }
}

async function testPipedriveApi() {
    try {
        const result = await apiCall('/pipedrive/test');
        if (result.success) {
            elements.pipedriveStatus.textContent = '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω';
            elements.pipedriveStatus.className = 'status-indicator healthy';
            addLog('success', `Pipedrive API: ${result.user} (${result.company})`);
        } else {
            elements.pipedriveStatus.textContent = '‚ùå –û—à–∏–±–∫–∞';
            elements.pipedriveStatus.className = 'status-indicator error';
            addLog('error', `Pipedrive API: ${result.error}`);
        }
    } catch (error) {
        elements.pipedriveStatus.textContent = '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        elements.pipedriveStatus.className = 'status-indicator error';
        addLog('error', `Pipedrive API: ${error.message}`);
    }
}

async function testWfirmaApi() {
    try {
        const result = await apiCall('/test');
        if (result.success) {
            elements.wfirmaStatus.textContent = '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω';
            elements.wfirmaStatus.className = 'status-indicator healthy';
            addLog('success', `wFirma API: ${result.message}`);
        } else {
            elements.wfirmaStatus.textContent = '‚ùå –û—à–∏–±–∫–∞';
            elements.wfirmaStatus.className = 'status-indicator error';
            addLog('error', `wFirma API: ${result.error}`);
        }
    } catch (error) {
        elements.wfirmaStatus.textContent = '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        elements.wfirmaStatus.className = 'status-indicator error';
        addLog('error', `wFirma API: ${error.message}`);
    }
}

// UI Update Functions
function updateSchedulerStatus(status) {
    if (status.isRunning) {
        elements.schedulerStatus.textContent = 'üü¢ –ó–∞–ø—É—â–µ–Ω';
        elements.schedulerStatus.className = 'status-indicator running';
        elements.schedulerInfo.innerHTML = `
            <div>–ó–∞–¥–∞—á: ${status.jobsCount}</div>
            <div>–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: ${status.nextRuns[0]?.time || 'N/A'}</div>
        `;
    } else {
        elements.schedulerStatus.textContent = 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        elements.schedulerStatus.className = 'status-indicator stopped';
        elements.schedulerInfo.innerHTML = `
            <div>–ó–∞–¥–∞—á: ${status.jobsCount}</div>
            <div>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: 9:00, 13:00, 18:00</div>
        `;
    }
}

function showResult(type, title, data) {
    const resultItem = document.createElement('div');
    resultItem.className = `result-item ${type}`;
    
    const timestamp = new Date().toLocaleTimeString();
    
    resultItem.innerHTML = `
        <h4>${title}</h4>
        <p><strong>–í—Ä–µ–º—è:</strong> ${timestamp}</p>
        <pre>${JSON.stringify(data, null, 2)}</pre>
    `;
    
    elements.resultsContainer.innerHTML = '';
    elements.resultsContainer.appendChild(resultItem);
}

function showPollingResults(result) {
    const resultItem = document.createElement('div');
    resultItem.className = `result-item ${result.success ? 'success' : 'error'}`;
    
    const timestamp = new Date().toLocaleTimeString();
    
    let resultsHtml = '';
    if (result.results && result.results.length > 0) {
        resultsHtml = '<h5>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:</h5><ul>';
        result.results.forEach(r => {
            const icon = r.success ? '‚úÖ' : '‚ùå';
            resultsHtml += `<li>${icon} Deal ${r.dealId}: ${r.message || r.error}</li>`;
        });
        resultsHtml += '</ul>';
    }
    
    resultItem.innerHTML = `
        <h4>–†–µ–∑—É–ª—å—Ç–∞—Ç Polling</h4>
        <p><strong>–í—Ä–µ–º—è:</strong> ${timestamp}</p>
        <p><strong>–í—Å–µ–≥–æ:</strong> ${result.summary?.total || 0}</p>
        <p><strong>–£—Å–ø–µ—à–Ω–æ:</strong> ${result.summary?.successful || 0}</p>
        <p><strong>–û—à–∏–±–æ–∫:</strong> ${result.summary?.errors || 0}</p>
        ${resultsHtml}
    `;
    
    elements.resultsContainer.innerHTML = '';
    elements.resultsContainer.appendChild(resultItem);
}

function showPendingDeals(deals) {
    const resultItem = document.createElement('div');
    resultItem.className = 'result-item';
    
    const timestamp = new Date().toLocaleTimeString();
    
    let dealsHtml = '';
    if (deals.length > 0) {
        dealsHtml = '<h5>–û–∂–∏–¥–∞—é—â–∏–µ —Å–¥–µ–ª–∫–∏:</h5><ul>';
        deals.forEach(deal => {
            const invoiceType = deal['ad67729ecfe0345287b71a3b00910e8ba5b3b496'] || '–ù–µ —É–∫–∞–∑–∞–Ω';
            dealsHtml += `<li>Deal ${deal.id}: ${deal.title} - ${invoiceType} (${deal.value} ${deal.currency})</li>`;
        });
        dealsHtml += '</ul>';
    } else {
        dealsHtml = '<p>–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</p>';
    }
    
    resultItem.innerHTML = `
        <h4>–û–∂–∏–¥–∞—é—â–∏–µ —Å–¥–µ–ª–∫–∏</h4>
        <p><strong>–í—Ä–µ–º—è:</strong> ${timestamp}</p>
        <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</strong> ${deals.length}</p>
        ${dealsHtml}
    `;
    
    elements.resultsContainer.innerHTML = '';
    elements.resultsContainer.appendChild(resultItem);
}

function addLog(type, message) {
    const logEntry = document.createElement('div');
    logEntry.className = `log-entry ${type}`;
    
    const timestamp = new Date().toLocaleTimeString();
    logEntry.innerHTML = `<span class="timestamp">[${timestamp}]</span>${message}`;
    
    elements.logsContainer.appendChild(logEntry);
    elements.logsContainer.scrollTop = elements.logsContainer.scrollHeight;
}

function setButtonLoading(button, loading) {
    if (loading) {
        button.disabled = true;
        button.innerHTML = '<div class="loading"></div> –ó–∞–≥—Ä—É–∑–∫–∞...';
    } else {
        button.disabled = false;
        // Restore original text based on button ID
        const originalTexts = {
            'start-scheduler': '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å',
            'stop-scheduler': '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
            'refresh-status': 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å',
            'run-polling': 'üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å Polling',
            'get-pending': 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ',
            'test-apis': 'üß™ –¢–µ—Å—Ç API'
        };
        button.innerHTML = originalTexts[button.id] || button.textContent;
    }
}