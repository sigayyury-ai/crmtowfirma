#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö endpoints wFirma API
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ URL –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º–∏
 */

require('dotenv').config();
const axios = require('axios');

async function testEndpoints() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö endpoints wFirma API...\n');

  const baseURL = process.env.WFIRMA_BASE_URL || 'https://api2.wfirma.pl';
  const accessToken = process.env.WFIRMA_ACCESS_TOKEN;

  if (!accessToken) {
    console.log('‚ùå Access Token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ OAuth 2.0');
    return;
  }

  const endpoints = [
    '/contractors.json',
    '/contractors/add.json',
    '/contractors/list.json',
    '/invoices.json',
    '/invoices/add.json',
    '/bank_accounts.json',
    '/companies.json',
    '/companies/add.json'
  ];

  console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º ${endpoints.length} endpoints —Å —Ç–æ–∫–µ–Ω–æ–º: ${accessToken.substring(0, 20)}...\n`);

  for (const endpoint of endpoints) {
    try {
      console.log(`üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${endpoint}`);
      
      const response = await axios.get(`${baseURL}${endpoint}`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });

      console.log(`‚úÖ ${endpoint} - –°—Ç–∞—Ç—É—Å: ${response.status}`);
      
      if (response.data) {
        if (typeof response.data === 'string') {
          if (response.data.includes('<?xml')) {
            console.log(`   üìÑ XML –æ—Ç–≤–µ—Ç (${response.data.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
            if (response.data.includes('<contractors>') || response.data.includes('<companies>')) {
              console.log(`   üéØ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤!`);
            }
          } else {
            console.log(`   üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: ${response.data.substring(0, 100)}...`);
          }
        } else {
          console.log(`   üìä JSON –æ—Ç–≤–µ—Ç: ${JSON.stringify(response.data, null, 2).substring(0, 200)}...`);
        }
      }
      
    } catch (error) {
      if (error.response) {
        console.log(`‚ùå ${endpoint} - –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        if (error.response.data) {
          if (typeof error.response.data === 'string') {
            if (error.response.data.includes('CONTROLLER NOT FOUND')) {
              console.log(`   üö´ Controller not found`);
            } else if (error.response.data.includes('AUTH')) {
              console.log(`   üîê Auth error`);
            } else {
              console.log(`   üìÑ –û—Ç–≤–µ—Ç: ${error.response.data.substring(0, 100)}...`);
            }
          } else {
            console.log(`   üìä JSON –æ—à–∏–±–∫–∞: ${JSON.stringify(error.response.data, null, 2).substring(0, 100)}...`);
          }
        }
      } else {
        console.log(`‚ùå ${endpoint} - –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
    
    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  }

  // –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...\n');
  
  const authMethods = [
    {
      name: 'Bearer Token',
      headers: { 'Authorization': `Bearer ${accessToken}` }
    },
    {
      name: 'Basic Auth (deprecated)',
      headers: { 'Authorization': `Basic ${Buffer.from(`${process.env.WFIRMA_CLIENT_ID}:${process.env.WFIRMA_CLIENT_SECRET}`).toString('base64')}` }
    }
  ];

  for (const authMethod of authMethods) {
    try {
      console.log(`üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${authMethod.name}`);
      
      const response = await axios.get(`${baseURL}/contractors.json`, {
        headers: {
          ...authMethod.headers,
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });

      console.log(`‚úÖ ${authMethod.name} - –°—Ç–∞—Ç—É—Å: ${response.status}`);
      
    } catch (error) {
      if (error.response) {
        console.log(`‚ùå ${authMethod.name} - –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        if (error.response.data) {
          console.log(`   üìÑ –û—Ç–≤–µ—Ç: ${JSON.stringify(error.response.data, null, 2).substring(0, 100)}...`);
        }
      } else {
        console.log(`‚ùå ${authMethod.name} - –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testEndpoints()
    .then(() => {
      console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', error.message);
      process.exit(1);
    });
}

module.exports = testEndpoints;
