#!/usr/bin/env node

/**
 * –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç wFirma API
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã endpoints –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤
 */

require('dotenv').config();
const axios = require('axios');

async function testWfirmaAPI() {
  console.log('üîç –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ wFirma API...\n');

  const baseURL = process.env.WFIRMA_BASE_URL || 'https://api2.wfirma.pl';
  const accessToken = process.env.WFIRMA_ACCESS_TOKEN;

  if (!accessToken) {
    console.log('‚ùå Access Token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ OAuth 2.0');
    console.log('üîó URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
    console.log(`${baseURL}/oauth/authorize?client_id=${process.env.WFIRMA_CLIENT_ID}&response_type=code&scope=read write&redirect_uri=https%3A%2F%2Fcomoon.io%2Foauth%2Fcallback`);
    return;
  }

  console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ç–æ–∫–µ–Ω–æ–º: ${accessToken.substring(0, 20)}...`);
  console.log(`üåê Base URL: ${baseURL}\n`);

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ API
  console.log('üîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ API...');
  try {
    const response = await axios.get(baseURL, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Accept': 'application/json'
      },
      timeout: 10000
    });
    console.log(`‚úÖ –ë–∞–∑–æ–≤—ã–π API –¥–æ—Å—Ç—É–ø–µ–Ω - –°—Ç–∞—Ç—É—Å: ${response.status}`);
  } catch (error) {
    console.log(`‚ùå –ë–∞–∑–æ–≤—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - ${error.response?.status || error.message}`);
  }

  // –¢–µ—Å—Ç 2: –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã endpoints
  const endpointVariants = [
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    '/contractors',
    '/contractors.json',
    '/contractors/list',
    '/contractors/list.json',
    '/contractors/add',
    '/contractors/add.json',
    
    // API –ø—Ä–µ—Ñ–∏–∫—Å—ã
    '/api/contractors',
    '/api/contractors.json',
    '/api/v1/contractors',
    '/api/v1/contractors.json',
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    '/companies',
    '/companies.json',
    '/companies/list',
    '/companies/list.json',
    '/clients',
    '/clients.json',
    '/clients/list',
    '/clients/list.json',
    
    // –î—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã
    '/invoices',
    '/invoices.json',
    '/invoices/list',
    '/invoices/list.json',
    '/bank_accounts',
    '/bank_accounts.json',
    '/bank_accounts/list',
    '/bank_accounts/list.json'
  ];

  console.log('\nüîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö endpoints...');
  
  for (const endpoint of endpointVariants) {
    try {
      console.log(`üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${endpoint}`);
      
      const response = await axios.get(`${baseURL}${endpoint}`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });

      console.log(`‚úÖ ${endpoint} - –°—Ç–∞—Ç—É—Å: ${response.status}`);
      
      if (response.data) {
        if (typeof response.data === 'string') {
          if (response.data.includes('<?xml')) {
            console.log(`   üìÑ XML –æ—Ç–≤–µ—Ç (${response.data.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
            if (response.data.includes('<contractors>') || response.data.includes('<companies>') || response.data.includes('<invoices>')) {
              console.log(`   üéØ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç!`);
            }
          } else {
            console.log(`   üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: ${response.data.substring(0, 100)}...`);
          }
        } else {
          console.log(`   üìä JSON –æ—Ç–≤–µ—Ç: ${JSON.stringify(response.data, null, 2).substring(0, 200)}...`);
        }
      }
      
    } catch (error) {
      if (error.response) {
        console.log(`‚ùå ${endpoint} - –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        if (error.response.data) {
          if (typeof error.response.data === 'string') {
            if (error.response.data.includes('CONTROLLER NOT FOUND')) {
              console.log(`   üö´ Controller not found`);
            } else if (error.response.data.includes('AUTH')) {
              console.log(`   üîê Auth error`);
            } else {
              console.log(`   üìÑ –û—Ç–≤–µ—Ç: ${error.response.data.substring(0, 100)}...`);
            }
          } else {
            console.log(`   üìä JSON –æ—à–∏–±–∫–∞: ${JSON.stringify(error.response.data, null, 2).substring(0, 100)}...`);
          }
        }
      } else {
        console.log(`‚ùå ${endpoint} - –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
  }

  // –¢–µ—Å—Ç 3: –†–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  console.log('\nüîê –¢–µ—Å—Ç 3: –†–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
  
  const authMethods = [
    {
      name: 'Bearer Token',
      headers: { 'Authorization': `Bearer ${accessToken}` }
    },
    {
      name: 'Basic Auth',
      headers: { 'Authorization': `Basic ${Buffer.from(`${process.env.WFIRMA_CLIENT_ID}:${process.env.WFIRMA_CLIENT_SECRET}`).toString('base64')}` }
    },
    {
      name: 'API Key in Header',
      headers: { 'X-API-Key': accessToken }
    },
    {
      name: 'API Key in Query',
      params: { 'api_key': accessToken }
    }
  ];

  for (const authMethod of authMethods) {
    try {
      console.log(`üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${authMethod.name}`);
      
      const config = {
        headers: {
          ...authMethod.headers,
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        timeout: 10000
      };

      if (authMethod.params) {
        config.params = authMethod.params;
      }
      
      const response = await axios.get(`${baseURL}/contractors.json`, config);

      console.log(`‚úÖ ${authMethod.name} - –°—Ç–∞—Ç—É—Å: ${response.status}`);
      
    } catch (error) {
      if (error.response) {
        console.log(`‚ùå ${authMethod.name} - –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        if (error.response.data) {
          console.log(`   üìÑ –û—Ç–≤–µ—Ç: ${JSON.stringify(error.response.data, null, 2).substring(0, 100)}...`);
        }
      } else {
        console.log(`‚ùå ${authMethod.name} - –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
  }

  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ OAuth endpoints
  console.log('\nüîê –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ OAuth endpoints...');
  
  const oauthEndpoints = [
    '/oauth/authorize',
    '/oauth/token',
    '/oauth/me',
    '/oauth/user',
    '/user',
    '/me',
    '/profile'
  ];

  for (const endpoint of oauthEndpoints) {
    try {
      console.log(`üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º OAuth: ${endpoint}`);
      
      const response = await axios.get(`${baseURL}${endpoint}`, {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Accept': 'application/json'
        },
        timeout: 10000
      });

      console.log(`‚úÖ ${endpoint} - –°—Ç–∞—Ç—É—Å: ${response.status}`);
      
    } catch (error) {
      if (error.response) {
        console.log(`‚ùå ${endpoint} - –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      } else {
        console.log(`‚ùå ${endpoint} - –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testWfirmaAPI()
    .then(() => {
      console.log('\nüèÅ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', error.message);
      process.exit(1);
    });
}

module.exports = testWfirmaAPI;






