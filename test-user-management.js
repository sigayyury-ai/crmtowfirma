// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
process.env.WFIRMA_APP_KEY = '8e76feba50499c61fddd0905b4f310ea';
process.env.WFIRMA_ACCESS_KEY = '61d2eee61d9104b2c9e5e1766af27633';
process.env.WFIRMA_SECRET_KEY = 'd096f54b74c3f4adeb2fd4ab362cd085';
process.env.WFIRMA_BASE_URL = 'https://api2.wfirma.pl';

const UserManagementService = require('./src/services/userManagement');
const logger = require('./src/utils/logger');

async function testUserManagement() {
  console.log('üîß Testing User Management Service...\n');

  try {
    const userManagement = new UserManagementService();

    // Test 1: –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
    console.log('üìã Test 1: Searching for existing contractor...');
    const existingUserData = {
      email: 'test.service.hardcoded@example.com', // –≠—Ç–æ—Ç email –º—ã —Å–æ–∑–¥–∞–ª–∏ —Ä–∞–Ω–µ–µ
      name: 'Test Service Hardcoded',
      address: 'Test Street 123',
      zip: '80-000',
      city: 'Gda≈Ñsk',
      country: 'PL',
      business_id: '1234567890',
      type: 'person'
    };

    const result1 = await userManagement.findOrCreateContractor(existingUserData);
    if (result1.success) {
      if (result1.found) {
        console.log('‚úÖ Existing contractor found:', result1.contractor.name, '(ID:', result1.contractor.id + ')');
      } else if (result1.created) {
        console.log('‚úÖ New contractor created:', result1.contractor.name, '(ID:', result1.contractor.id + ')');
      }
    } else {
      console.log('‚ùå Failed:', result1.error);
    }

    console.log('\n' + '='.repeat(50) + '\n');

    // Test 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
    console.log('üìã Test 2: Creating new contractor...');
    const newUserData = {
      email: 'test.user.management@example.com',
      name: 'Test User Management',
      address: 'Test Street 456',
      zip: '80-000',
      city: 'Gda≈Ñsk',
      country: 'PL',
      business_id: '9876543210',
      type: 'person'
    };

    const result2 = await userManagement.findOrCreateContractor(newUserData);
    if (result2.success) {
      if (result2.found) {
        console.log('‚úÖ Existing contractor found:', result2.contractor.name, '(ID:', result2.contractor.id + ')');
      } else if (result2.created) {
        console.log('‚úÖ New contractor created:', result2.contractor.name, '(ID:', result2.contractor.id + ')');
      }
    } else {
      console.log('‚ùå Failed:', result2.error);
    }

    console.log('\n' + '='.repeat(50) + '\n');

    // Test 3: –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('üìã Test 3: Testing cache...');
    const result3 = await userManagement.findOrCreateContractor(existingUserData);
    if (result3.success) {
      if (result3.fromCache) {
        console.log('‚úÖ Contractor retrieved from cache:', result3.contractor.name);
      } else {
        console.log('‚ùå Contractor not retrieved from cache');
      }
    } else {
      console.log('‚ùå Failed:', result3.error);
    }

    console.log('\n' + '='.repeat(50) + '\n');

    // Test 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    console.log('üìã Test 4: Cache statistics...');
    const cacheStats = userManagement.getCacheStats();
    console.log('‚úÖ Cache stats:', cacheStats);

    console.log('\n' + '='.repeat(50) + '\n');

    // Test 5: –ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
    console.log('üìã Test 5: Searching for non-existent contractor...');
    const nonExistentUserData = {
      email: 'nonexistent@example.com',
      name: 'Non Existent User',
      address: 'Test Street 789',
      zip: '80-000',
      city: 'Gda≈Ñsk',
      country: 'PL',
      business_id: '1111111111',
      type: 'person'
    };

    const result5 = await userManagement.findOrCreateContractor(nonExistentUserData);
    if (result5.success) {
      if (result5.found) {
        console.log('‚úÖ Contractor found:', result5.contractor.name, '(ID:', result5.contractor.id + ')');
      } else if (result5.created) {
        console.log('‚úÖ New contractor created:', result5.contractor.name, '(ID:', result5.contractor.id + ')');
      }
    } else {
      console.log('‚ùå Failed:', result5.error);
    }

  } catch (error) {
    console.log('‚ùå Error during user management test:', error.message);
  }
}

testUserManagement();




